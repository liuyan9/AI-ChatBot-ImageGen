<!DOCTYPE html>
<html lang="en">
<head>
    <style>
        #chat-container {
          height: 400px;
          overflow-y: auto;
          padding: 1rem;
          background-color: #f2f2f2;
          border-radius: 10px;
          margin-bottom: 1rem;
        }
      
        #input-container {
          display: flex;
          align-items: center;
          justify-content: space-between;
          padding: 1rem;
        }
      
        #user-input {
          flex-grow: 1;
          padding: 0.5rem;
          font-size: 1rem;
          border-radius: 10px;
          border: none;
        }
      
        #send-btn {
          background-color: #4CAF50;
          color: white;
          padding: 0.5rem 1rem;
          font-size: 1rem;
          border-radius: 10px;
          border: none;
          cursor: pointer;
        }
          /* Add styles for the loading icon */
  .loading {
    display: inline-block;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    animation: spin 0.5s linear infinite;
  }
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
      </style>
       
  <!-- Specify the character encoding for the document -->
  <meta charset="UTF-8">
  <!-- Set the viewport to adjust the size of the page to the device screen -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- Set the title of the page -->
  <title>Chat with GPT-4</title>
  <!-- Link the normalize.css stylesheet -->
  <link href="css/normalize.css" rel="stylesheet" type="text/css">
  <!-- Link the webflow.css stylesheet -->
  <link href="css/webflow.css" rel="stylesheet" type="text/css">
  <!-- Link the nolimitgpt.webflow.css stylesheet -->
  <link href="css/nolimitgpt.webflow.css" rel="stylesheet" type="text/css">
</head>
<body class="body-4">
  <!-- Navbar with a container to hold the logo and navigation links -->
  <div data-animation="default" data-collapse="medium" data-duration="400" data-easing="ease" data-easing2="ease" role="banner" class="navbar w-nav">
    <div class="w-container">
      <!-- Logo image -->
      <img src="images/magnifying_glass_logo-removebg-preview.png" loading="eager" width="100" sizes="(max-width: 479px) 42vw, 100px" srcset="images/magnifying_glass_logo-removebg-preview-p-500.png 500w, images/magnifying_glass_logo-removebg-preview.png 500w" alt="" class="image">
      <!-- Brand name -->
      <a href="/" class="brand-2 w-nav-brand">nolimitGPT</a>
      <!-- Navigation menu -->
      <nav role="navigation" class="navmenu w-nav-menu">
        <!-- Dashboard link -->
        <a href="/dashboard" class="hero-button navigationbuttonmain w-nav-link">Dashboard</a>
      </nav>
      <!-- Navigation button -->
      <div class="w-nav-button"></div>
    </div>
  </div>
  <!-- Empty container -->
  <div class="w-container"></div>
  <!-- Main container for the chat interface -->
  <div class="container-3 w-container">
    <!-- Display the number of credits -->
    <h2>Credits: <span id="credits-display"><%= user.credits %></span></h2>
    <!-- Chat container -->
    <div id="chat-container">
    </div>
    <!-- Input container -->
    <div id="input-container">
        <!-- User input field -->
        <input type="text" id="user-input" placeholder="Type your message here...">
        <!-- Send button -->
        <button id="send-btn">Send</button>
    </div>
  </div>

<script>
  // Get the chat container, user input field, send button, and credits display elements
  const chatContainer = document.getElementById('chat-container');
  const userInput = document.getElementById('user-input');
  const sendBtn = document.getElementById('send-btn');
  const creditsDisplay = document.getElementById('credits-display');

  // Function to add a message to the chat container
  function addMessageToChat(content, role) {
    // Create a new div element to hold the message
    const message = document.createElement('div');
    // Regular expression pattern to match code blocks
    const codeBlockRegex = /`{3}([\s\S]*?)`{3}/g;
    // Array of matched code blocks
    const matchedCodeBlocks = content.match(codeBlockRegex);

    // If there are matched code blocks
    if (matchedCodeBlocks) {
      // Loop through each code block
      matchedCodeBlocks.forEach(block => {
        // Get the content of the code block
        const codeContent = block.slice(3, -3).trim();
        // Wrap the content in a pre element
        const codeBlock = `<pre>${codeContent}</pre>`;
        // Replace the code block in the content with the pre element
        content = content.replace(block, codeBlock);
      });
    }

    // Set the inner HTML of the message div to display the role and message
    message.innerHTML = `<strong>${role}:</strong> ${content}`;
    // Set a margin at the bottom of the message
    message.style.marginBottom = '1rem';
    // Append the message to the chat container
    chatContainer.appendChild(message);
    // Scroll the chat container to the bottom
    chatContainer.scrollTop = chatContainer.scrollHeight;
  }

  // Asynchronous function to send a message to the server
  async function sendMessage() {
  // Get the value of the user input
  const message = userInput.value.trim();
  // Return if the input is empty
  if (message === '') return;

  // Get the number